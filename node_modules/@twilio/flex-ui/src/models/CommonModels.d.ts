import { Conference } from "../state/ConferencesState";
export declare type TaskTaskStatus = "reserved" | "assigned" | "wrapping" | "completed" | "canceled";
export declare type TaskReservationStatus = "pending" | "accepted" | "wrapping" | "completed" | "canceled";
export declare class TaskTransfer {
    mode: string;
    status: string;
    type: string;
    workerSid: string;
    to: string;
    sid: string;
    constructor(source: any);
    readonly worker: IWorker<any>;
    readonly queue: IQueue<any>;
}
export interface ITask {
    source: any;
    sourceObject: any;
    addOns: Object;
    age: number;
    attributes: any;
    dateCreated: Date;
    dateUpdated: Date;
    priority: number;
    queueName: string;
    queueSid: string;
    reason: string;
    sid: string;
    status: TaskReservationStatus;
    taskSid: string;
    taskStatus: TaskTaskStatus;
    taskChannelSid: string;
    taskChannelUniqueName: string;
    timeout: number;
    workflowName: string;
    workflowSid: string;
    workerSid: string;
    transferObject: TaskTransfer;
    defaultFrom: string;
    channelType: string;
    conference: Conference;
    complete: () => Promise<any>;
    transfer: (to: string, options: any) => Promise<any>;
    hold: () => Promise<any>;
    unhold: () => Promise<any>;
    setAttributes: (attributes: Object) => Promise<any>;
    wrapUp: () => Promise<any>;
}
export interface WorkerSkillsType {
    id?: string;
    skills?: Array<string>;
    levels?: {
        [name: string]: number;
    };
}
export interface WorkerAttributes {
    routing?: WorkerSkillsType;
    disabled_skills?: WorkerSkillsType;
    [name: string]: any;
}
export interface IWorker<SOURCE_TYPE = any> {
    source: SOURCE_TYPE;
    sid: string;
    name: string;
    fullName: string;
    activityName: string;
    attributes: WorkerAttributes;
    dateUpdated: Date;
    isAvailable: boolean;
    activityDuration: string;
}
export interface IQueue<SOURCE_TYPE = any> {
    source: SOURCE_TYPE;
    dateUpdated: Date;
    sid: string;
    name: string;
    workspaceSid: string;
}
