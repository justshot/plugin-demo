import { Action, Dispatch } from "redux";
import { SSOTokenPayload, SSOLoginHandler } from "../core/SSOLoginHandler";
import { WorkerLogoutPayload } from "../actions/WorkerActions";
export declare enum LoginState {
    Unknown = "UNKNOWN",
    LoggingIn = "LOGGING_IN",
    LoggedIn = "LOGGED_IN",
    LoggedOut = "LOGGED_OUT",
    Error = "ERROR"
}
export interface SessionState {
    readonly identity: string;
    readonly loginHandler: SSOLoginHandler;
    readonly loginError: any;
    readonly loginState: LoginState;
    readonly ssoTokenPayload: SSOTokenPayload;
}
interface SessionStateAction extends Action {
    readonly payload?: any;
}
export declare const ACTION_LOGGED_OUT = "FLEX_ACTION_LOGGED_OUT";
export declare function reduce(state: SessionState, action: SessionStateAction): SessionState;
export declare class Actions {
    private static _dispatcher;
    static dispatcher: Dispatch<any>;
    static init(): void;
    static ssoLogin(loginHandler: SSOLoginHandler): Promise<void>;
    private static handleTokenUpdated;
    private static handleTokenExpired;
    private static initClients;
    static logout(logoutPayload: WorkerLogoutPayload): Promise<void>;
}
export {};
