/// <reference types="loglevel" />
import { DeepPartial, CoreThemeColors } from "@twilio/frame-ui";
import { Theme, BaseThemeColors } from "../components/theme";
import { ITask } from "../models";
export declare type TaskFilterCallback = (task: ITask) => boolean;
export interface TaskFilter {
    callback: TaskFilterCallback;
    text?: string;
}
export interface SplitterProps {
    initialFirstPanelSize?: string;
    minimumFirstPanelSize?: string;
    minimumSecondPanelSize?: string;
}
export interface ThemeConfigProps {
    baseName?: PredefinedThemeName;
    colors?: Partial<CoreThemeColors & BaseThemeColors>;
    light?: boolean;
    overrides?: DeepPartial<Theme>;
}
export interface SDKOptions {
    worker?: Object;
    chat?: Object;
    voice?: Object;
    insights?: Object;
}
declare type DeprecatedThemeName = "MediumTheme" | "DarkTheme" | "BlueMediumTheme" | "BlueDarkTheme";
export declare type PredefinedThemeName = DeprecatedThemeName | "GreyLight" | "GreyDark" | "FlexLight" | "FlexDark";
/**
 * Configuration interface
 *
 * @export
 * @interface Config
 * @property {Config.SSOConfig} sso SSO configuration
 */
export interface Config {
    language?: string;
    logLevel?: log.LogLevelDesc;
    colorTheme?: ThemeConfigProps | PredefinedThemeName;
    serviceBaseUrl?: string;
    sdkOptions?: SDKOptions;
    sso?: SSOConfig;
    pluginService?: {
        enabled?: boolean;
        url?: string;
    };
    componentProps?: any;
    flexServiceUrl?: string;
    router?: {
        type: "browser" | "memory";
        history?: object;
        isolate?: boolean;
    };
    chatOrchestrationServiceUrl?: string;
    flexConfigServiceUrl?: string;
    disableBrowserVoice?: boolean;
}
export interface SkillDefinition {
    name: string;
    multivalue: boolean;
    minimum?: number;
    maximum?: number;
}
/**
 * Service configuration
 *
 * @typedef {Object} ServiceConfiguration
 * @memberof Config
 */
export interface ServiceConfiguration {
    account_sid: string;
    attributes: any;
    call_recording_enabled: boolean;
    call_recording_callback_url: string;
    chat_service_instance_sid: string;
    crm_attributes: any;
    crm_callback_url: string;
    crm_enabled: boolean;
    crm_fallback_url: string;
    crm_type: string;
    date_created: string;
    date_updated: string;
    identity_realm_sid: string;
    identity_sso_login_url: string;
    identity_sso_logout_url: string;
    messaging_service_instance_sid: string;
    runtime_domain: string;
    service_version: string;
    status: string;
    taskrouter_offline_activity_sid?: string;
    taskrouter_skills?: Array<SkillDefinition>;
    taskrouter_target_taskqueue_sid: string;
    taskrouter_target_workflow_sid: string;
    taskrouter_taskqueues: any;
    taskrouter_worker_attributes: any;
    taskrouter_worker_channels: any;
    taskrouter_workspace_sid: string;
    ui_attributes: Partial<Config> & {
        version_compatibility?: "yes" | "no" | "deprecated";
        version_message?: string;
    };
    ui_language: string;
    ui_version: string;
    url: string;
}
/**
 * SSO Configuration interface
 *
 * @export
 * @typedef {Object} SSOConfig
 * @property {string} [accountSid] account SID
 * @property {boolean} [loginPopup] whether to launch IdP login in new window
 * @property {string} [loginPopupFeatures] standard window.open() features param to be applied to popup window
 * @property {string} [redirectUrl] redirect url where to return back from IdP that can store the provided login information. Defaults to window.location.href.
 * @property {number} [tokenRefreshThresholdMs] milliseconds before token expiration to start token update procedure
 * @memberof Config
 */
export interface SSOConfig {
    accountSid?: string;
    idpUrl?: string;
    loginUrl?: string;
    loginPopup?: boolean;
    loginPopupFeatures?: string;
    products?: Array<string>;
    redirectUrl?: string;
    tokenRefreshUrl?: string;
    tokenRefreshThresholdMs?: number;
}
export {};
