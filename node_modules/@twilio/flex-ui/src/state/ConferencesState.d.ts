import { AnyAction } from "redux";
import { SyncClient, SyncMapItem } from "twilio-sync";
import { ITask } from "../models";
export interface ConferencesState {
    readonly client: SyncClient;
    readonly states: Map<string, Conference>;
}
export declare class ConferenceParticipant {
    private _source;
    participantLeftTimestamp: number;
    constructor(source: any, participantLeftTimestamp?: number);
    readonly source: any;
    readonly worker: import("../models").IWorker<any>;
    readonly queue: import("../models").IQueue<any>;
    readonly onHold: any;
    readonly muted: any;
    readonly connecting: any;
    readonly participantType: any;
    readonly reservationSid: any;
    readonly workerSid: any;
    readonly status: any;
    readonly sid: string;
    readonly isMyself: boolean;
}
export declare class Conference {
    source: ConferenceListener;
    status: string;
    conferenceSid: string;
    participants: Array<ConferenceParticipant>;
    readonly liveParticipantCount: number;
    readonly liveWorkerCount: number;
}
export interface UpdateConferencePayload {
    sid: string;
    conference: Conference;
}
export declare function reduce(state: ConferencesState, action: AnyAction): ConferencesState;
export declare class Actions {
    private static stateUpdateTimeouts;
    private static dispatchAction;
    static assignInsights(insightsClient: any): void;
    static handleConferenceUpdate(sid: string, listener: ConferenceListener): void;
    static shutdown(): void;
}
interface OutboundTransfer {
    sid: string;
    status: string;
}
interface ConferenceListenerCallback {
    (sid: string, listener: ConferenceListener): void;
}
export declare class ConferenceListener {
    private failedTransferRemoveTimer;
    private sid;
    private map;
    private updateCallback;
    children: Array<SyncMapItem>;
    outboundTransfer: OutboundTransfer;
    constructor(sid: string, updateCallback?: ConferenceListenerCallback);
    stop(): void;
    initOutboundTransfer(sid: string): void;
    updateOutboundTransfer(event: string): void;
    private initialize;
    private emitCallback;
    private itemAdded;
    private itemUpdated;
    private itemRemoved;
}
export declare class ConferenceListenerManager {
    private static confs;
    private static requestedSids;
    private static initialized;
    static initialize(): void;
    static startListening(task: ITask): void;
    static stopListening(taskSid: string): void;
    static initOutboundTransfer(taskSid: string, workerSid: string): void;
    static updateOutboundTransfer(taskSid: string, event: string): void;
}
export {};
