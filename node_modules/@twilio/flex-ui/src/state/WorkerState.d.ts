import { AnyAction } from "redux";
import { Activity, Reservation, Worker } from "twilio-taskrouter";
import { Conference } from "./ConferencesState";
import { ITask, IWorker } from "../models";
export interface WorkerState {
    readonly tasks: Map<string, ITask>;
    readonly listener: WorkerListener;
    readonly activity: Activity;
    readonly activities: Map<string, Activity>;
    readonly attributes: any;
    readonly source: Worker;
    readonly worker: IWorker;
}
export declare function reduce(state: WorkerState, action: AnyAction): WorkerState;
export declare class Actions {
    private static previousEndConferenceOnExits;
    static dispatchWorkerAction(type: string, payload: any): void;
    static init(worker: Worker): void;
    static addReservation(reservation: Reservation): void;
    static setCurrentActivity(activitySid: string): Promise<any>;
    static setCurrentActivityByName(activityName: string): Promise<void>;
    static updateEndConferenceOnExitForTask(task: ITask, newConference?: Conference): void;
    static shutdown(): void;
}
export declare class WorkerListener {
    private _worker;
    private _listening;
    private _reservationListeners;
    constructor(worker: Worker);
    start(): void;
    stop(): void;
    private dispatchAction;
    private stopReservationListeners;
    private initReservationListeners;
    private handleActivityUpdated;
    private handleAttributesUpdated;
    private handleReservationCreated;
    private handleReservationUpdated;
    private handleTaskUpdated;
    isListening(): boolean;
}
