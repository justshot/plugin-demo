import { Action, Dispatch } from "redux";
import { ITask } from "../models";
export interface ViewState {
    readonly isSideNavOpen: boolean;
    readonly activeView?: string;
    readonly selectedTaskSid?: string;
    readonly selectedTaskInSupervisorSid?: string;
    readonly selectedWorkerInSupervisorSid?: string;
    readonly isDirectoryOpen?: boolean;
}
export interface ViewStateAction extends Action {
    readonly payload?: any;
}
export declare const ACTION_TOGGLE_SIDEBAR = "VIEW_TOGGLE_SIDEBAR";
export declare const ACTION_UPDATE_VIEW = "VIEW_UPDATE";
export declare function reduce(state: ViewState, action: ViewStateAction): ViewState;
export declare class Actions {
    private static _dispatcher;
    static dispatcher: Dispatch<any>;
    static toggleSidebar(): void;
    static hideSidebar(): void;
    static setActiveView(name: string): void;
    static showDirectory(task: ITask): void;
    static hideDirectory(): void;
    static selectTask(taskSid: string): void;
    static selectTaskInSupervisor(taskSid: string): void;
    static selectWorkerInSupervisor(workerSid: string): void;
    static push(location: any): void;
    static replace(...args: Array<any>): void;
    static go(...args: Array<any>): void;
    static goForward(...args: Array<any>): void;
    static goBack(...args: Array<any>): void;
}
