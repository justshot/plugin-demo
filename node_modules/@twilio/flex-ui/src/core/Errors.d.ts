/**
 * Flex Errors
 * @namespace FlexError
 */
/**
 * Configuration error keys
 *
 * <ul>
 *   <li>accountSid - accountSid missing from configuration</li>
 *   <li>sso - sso configuration missing</li>
 * </ul>
 * @typedef {"accountSid" | "sso"} FlexError.ConfigError#ConfigErrorKeys
 */
export declare enum ConfigErrorKeys {
    accountSid = "accountSid",
    sso = "sso"
}
/**
 * @classdesc Error thrown by configuration / setup validation
 * @param {FlexError.ConfigError#ConfigErrorKeys} key error key
 * @memberof FlexError
 */
export declare class ConfigError extends Error {
    key: ConfigErrorKeys;
    constructor(key: ConfigErrorKeys, ...params: Array<any>);
}
/**
 * Validation error keys
 * <ul>
 *   <li>accountSid - failed to determine the account sid</li>
 *   <li>sso - failed to determine sso configuration</li>
 *   <li>untrustedDomain - domain not whitelisted</li>
 * </ul>
 * @typedef {"accountSid" | "sso" | "untrustedDomain"} FlexError.ValidationError#ValidationErrorKeys
 */
export declare enum ValidationErrorKeys {
    accountSid = "accountSid",
    sso = "sso",
    untrustedDomain = "untrustedDomain"
}
/**
 * @classdesc Error thrown by user configuration / setup validation
 * @param {FlexError.ValidationError#ValidationErrorKeys} key error key
 * @memberof FlexError
 */
export declare class ValidationError extends Error {
    key: ValidationErrorKeys;
    constructor(key: ValidationErrorKeys, ...params: Array<any>);
}
/**
 * Browser error keys
 * <ul>
 *   <li>windowClosed - user closed the login window</li>
 *   <li>popupBlocked - popup was blocked by browser</li>
 *   <li>noWindowOpener - login window has no window.opener set</li>
 *   <li>redirecting -  browser is being redirected</li>
 * </ul>
 * @typedef {"windowClosed" | "popupBlocked" | "noWindowOpener" | "redirecting"} FlexError.BrowserError#BrowserErrorKeys
 */
export declare enum BrowserErrorKeys {
    windowClosed = "windowClosed",
    popupBlocked = "popupBlocked",
    noWindowOpener = "noWindowOpener",
    redirecting = "redirecting"
}
/**
 * @classdesc Error that is thrown if there is something problem with web browser.
 * @param {FlexError.BrowserError#BrowserErrorKeys} key error key
 * @memberof FlexError
 */
export declare class BrowserError extends Error {
    key: BrowserErrorKeys;
    constructor(key: BrowserErrorKeys, ...params: Array<any>);
}
/**
 * @classdesc Error that is throw if there is some internal problem with Flex.
 * @memberof FlexError
 */
export declare class InternalError extends Error {
    constructor(...params: Array<any>);
}
/**
 * Client error keys
 * <ul>
 *   <li>loginWindowOpenedFromLoginWindow - new login window opened from login window</li>
 *   <li>metaNoReferrerMissing - element meta with attributes name="referrer" content="no-referrer" is missing from document head section</li>
 * </ul>
 * @typedef {"loginWindowOpenedFromLoginWindow" | "metaNoReferrerMissing"} FlexError.ClientError#ClientErrorKeys
 */
export declare enum ClientErrorKeys {
    loginWindowOpenedFromLoginWindow = "loginWindowOpenedFromLoginWindow",
    metaNoReferrerMissing = "metaNoReferrerMissing"
}
/**
 * @classdesc Error that is thrown if there is some problem with customization code.
 * @param {FlexError.ClientError#ClientErrorKeys} key error key
 * @memberof FlexError
 */
export declare class ClientError extends Error {
    key: ClientErrorKeys;
    constructor(key: ClientErrorKeys, ...params: Array<any>);
}
