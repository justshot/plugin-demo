import { Manager } from "./Manager";
/**
 * @callback initCallback
 * @param {Flex} Flex instance of Flex
 * @param {Manager} manager instance of Flex Manager
 * @memberof PluginManager
 */
/**
 * Flex Plugin
 *
 * @typedef {Object} Plugin
 * @property {string} name name of the plugin
 * @property {PluginManager.initCallback} init init function of the plugin. Instance of Flex and Manager will be passed as arguments.
 * @memberof PluginManager
 */
interface Plugin {
    name: string;
    init(flexComponents: any, manager: Manager): any;
}
/**
 * Plugin constructor type. Plugins must nave new() operator defined.
 *
 * @typedef {Object} PluginConstructor
 * @property {PluginManager.Plugin} new() constructor of a plugin
 * @memberof PluginManager
 */
interface PluginConstructor {
    new (): Plugin;
}
/**
 * @classdesc Flex Plugin Manager
 * @package
 */
declare class PluginManager {
    private _manager;
    private _flexComponents;
    /**
     * Set up Plugin manager by providing Flex instance params
     *
     * @private
     * @param {*} flexComponents
     * @param {Manager} manager
     */
    setup(flexComponents: any, manager: Manager): void;
    /**
     * Creates an instance of Flex plugin and initializes it.
     * Must be called from Plugin main script after Flex has fetched and loaded the plugin.
     *
     * @param {PluginManager.PluginConstructor} PluginConstructor Plugin type
     */
    init(Plugin: PluginConstructor): void;
}
/**
 * @constant {PluginManager} Plugins Instance of Flex Plugin Manager
 */
export declare const Plugins: PluginManager;
/**
 * Loads all plugins.
 * Request plugins from plugin service and loads all plugin scripts to page.
 * Plugin script must call Flex.Plugins.init() method.
 *
 * @private
 * @param {*} flexComponents
 * @param {Manager} manager
 * @returns {Promise<void>}
 */
export declare function loadPlugins(flexComponents: any, manager: Manager): Promise<void>;
export {};
