import { AnyAction } from "redux";
import { AppState } from "./state/AppState";
import * as AppConfigReducer from "./state/AppConfig.Actions";
import * as SessionReducer from "./state/SessionState";
import * as WorkerReducer from "./state/WorkerState";
import * as PhoneReducer from "./state/PhoneState";
import * as ViewReducer from "./state/ViewState";
import * as InsightsReducer from "./state/InsightsState";
import * as SupervisorReducer from "./state/SupervisorState";
import * as ConferencesReducer from "./state/ConferencesState";
import * as QueuesReducer from "./state/QueuesState";
export declare type RootAction = AnyAction & AppConfigReducer.AppConfigAction & PhoneReducer.PhoneAction;
/**
 * Flex reducer for Redux store. Use key `flex` in your redux store for Flex state.
 *
 * @example
 * import { FlexReducer, applyFlexMiddleware} from "@twilio/flex-ui";
 * const reducers = combineReducers({
 *   flex: FlexReducer,
 *   myApp: myAppReducer // application reducer
 * });
 * const myReduxStore = createStore(
 *   reducers,
 *   compose(
 *     applyFlexMiddleware()
 *   )
 * );
 *
 * @param {AppState} state state of the application
 * @param {Action} action dispatched action
 * @returns {AppState} Flex state
 */
export declare const FlexReducer: (state: AppState, action: RootAction) => {
    config: import("./state").Config;
    session: SessionReducer.SessionState;
    chat: import("@twilio/frame-ui/src/state/ChatState").ChatState;
    worker: WorkerReducer.WorkerState;
    phone: PhoneReducer.PhoneState;
    view: ViewReducer.ViewState;
    insights: InsightsReducer.InsightsState;
    supervisor: SupervisorReducer.SupervisorState;
    router: any;
    conferences: ConferencesReducer.ConferencesState;
    queues: QueuesReducer.QueuesStateInterface;
};
