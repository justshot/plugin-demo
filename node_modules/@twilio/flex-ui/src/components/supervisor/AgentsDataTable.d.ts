import * as React from "react";
import { DynamicContentStore } from "@twilio/frame-ui";
import { ITask, IWorker } from "../../models/CommonModels";
import { AppState } from "../../state";
import { SupervisorWorkerState } from "../../state/SupervisorState";
export interface AgentListFilter {
    text?: string;
    query: string;
}
export declare type AgentListFilterFactory = (storeState: AppState, ownProps: AgentsDataTableProps) => AgentListFilter;
export interface AgentsDataTableProps {
    tablePlaceHolder?: React.ReactNode;
    initialCompareFunction?: (a: IWorker, b: IWorker) => number;
    filters?: Array<AgentListFilter | AgentListFilterFactory>;
    taskFilter?: string;
    selectedTask?: ITask;
    selectedWorker?: IWorker;
    monitoredTaskSid?: string;
    onTaskSelected?: (task: ITask) => void;
    onWorkerSelected?: (task: IWorker) => void;
    workers?: Array<SupervisorWorkerState>;
}
export declare const defaultCompareFunction: (a: IWorker<any>, b: IWorker<any>) => number;
export declare class AgentsDataTable extends React.PureComponent<AgentsDataTableProps> {
    static readonly displayName = "AgentsDataTable";
    static readonly Content: DynamicContentStore;
    static readonly IncludeAllFilter: AgentListFilter;
    static readonly IncludeActiveAgentsFilter: AgentListFilterFactory;
    static readonly defaultProps: Partial<AgentsDataTableProps>;
    static updateAll(): void;
    render(): JSX.Element;
}
export interface ColumnDataCreationContext {
    onTaskSelected?: (task: ITask) => void;
    selectedTask?: ITask;
    monitoredTaskSid?: string;
}
export declare const mapStoreStateToProps: (storeState: AppState, ownProps: AgentsDataTableProps) => Partial<AgentsDataTableProps>;
