import * as React from "react";
import { DynamicContentStore } from "@twilio/frame-ui";
import { RouteProps } from "react-router";
import { RouterState } from "react-router-redux";
export interface ViewCollectionProps {
    defaultLocation?: string | object;
    router?: RouterState;
}
export interface ViewAdditionalProps {
    isViewActive?: boolean;
    route?: RouteProps;
}
export declare class ViewCollection extends React.PureComponent<ViewCollectionProps> {
    static readonly displayName = "ViewCollection";
    static readonly Content: DynamicContentStore;
    static updateAll(): void;
    static readonly defaultProps: ViewCollectionProps;
    render(): JSX.Element;
}
export declare class ViewCollectionImpl extends React.PureComponent<ViewCollectionProps, any> {
    private keysOfViewsThatHaveBeenMounted;
    private getPathnameFromProps;
    private getRouteFromView;
    private isActiveView;
    private shallRenderView;
    private registerViewHavingBeenMounted;
    private renderRouteChildren;
    private updateChildren;
    render(): JSX.Element;
}
export declare enum ViewMountRule {
    Always = "Always",
    WhenActive = "WhenActive",
    WhenHasBeenActive = "WhenHasBeenActive"
}
export interface ViewProps {
    name: string;
    className?: string;
    children: React.ReactNode;
    keepMounted?: boolean;
    mountRule?: ViewMountRule;
}
export declare const View: React.SFC<ViewProps & Partial<ViewAdditionalProps>>;
