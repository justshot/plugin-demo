/// <reference types="react" />
/// <reference types="node" />
import { EventEmitter } from "events";
import * as NotificationIds from "./NotificationIds";
export { NotificationIds };
/**
 * Properties of the Notification
 * @typedef NotificationContentProps
 * @property {Object} [notificationContext] - A optional context for the Notification
 */
export interface NotificationContentProps {
    notificationContext?: Object;
}
/**
 * @typedef Notification
 * @property {string} id - The id for the notification
 * @property {string | React.ReactChild | React.ReactElement<NotificationContentProps>} content - A content for the notification
 * @property {NotificationType} type - The type of the notification - "information" "success" "warning" "error"
 * @property {string} [backgroundColor] - Define the notification background color
 * @property {string} [icon] - An optional icon to be rendered inside the notification message
 * @property {number} [timeout] - If set, it will dismiss the notification after a certain time
 * @property {boolean} [closeButton] - Show a close button
 * @property {Object} [context] - Optional context for the notification
 */
export interface Notification {
    id: string;
    content: string | React.ReactChild | React.ReactElement<NotificationContentProps>;
    type: NotificationType;
    backgroundColor?: string;
    icon?: string;
    timeout?: number;
    closeButton?: boolean;
    context?: Object;
}
/**
 * The notification event
 * @typedef NotificationEvent
 * @enum {string} - "notificationAdded" or "notificationDismissed"
 */
export declare enum NotificationEvent {
    notificationAdded = "notificationAdded",
    notificationDismissed = "notificationDismissed"
}
/**
 * The type of the notification
 * @typedef NotificationType
 * @enum {string} - "information" "success" "warning" "error"
 */
export declare enum NotificationType {
    information = "information",
    success = "success",
    warning = "warning",
    error = "error"
}
/**
 * @classdesc The notification manager
 * @extends {EventEmitter}
 */
export declare class NotificationManager extends EventEmitter {
    /**
     * Map of registered notifications
     * @static
     */
    readonly registeredNotifications: Map<string, Notification>;
    /**
     * An array of active notifications
     */
    readonly activeNotifications: Array<Notification>;
    /**
     * A default timeout for the notifications
     * @static
     */
    static defaultTimeout: number;
    /**
     * Register notification
     * @param {Notification} notification - The notification to be registered
     */
    registerNotification(notification: Notification): void;
    /**
     * Show notification
     * @param {string} id - The id for the notification
     * @param {Object} [context] - A context to be rendered in the notification
     */
    showNotification(id: string, context?: Object): Notification;
    /**
     * Dismiss notifications
     * @param {Notification} notification - The notification to be dismissed
     */
    dismissNotification(notification: Notification): void;
    /**
     * Dismiss a notification given a valid id
     * @param {string} id - The id of the notification to be dismissed
     */
    dismissNotificationById(id: string): void;
    /**
     * Dismiss all the active notifications
     */
    dismissAll(): void;
}
/**
 * Main entry point to NotificationManager singleton
 */
export declare const Notifications: NotificationManager;
