import * as React from "react";
import { ThemeProps } from "../../theme";
/**
 * Form Attributes
 * @typedef FormAttributes
 * @property {string} [type] - The type of the form
 * @property {string} [name] - An optional name for the form
 * @property {boolean} [hideMessage]
 * @property {Array.<FormField>} fields - An array containing the form fields
 * @property {string} [submitLabel] - A custom label for the submit button
 * @property {string} [description] - A short description to be rendered inside the form
 * @property {string} [message] - If present, a message will be rendered after the form description
 * @property {boolean} [disabled] - Disable the form
 */
export interface FormAttributes {
    type?: string;
    name?: string;
    hideMessage?: boolean;
    fields: Array<FormField>;
    submitLabel?: string;
    description?: string;
    message?: string;
    disabled?: boolean;
}
/**
 * @typedef FormFieldAttributes
 * @property {string} name - An optional name for the form attribute
 * @property {string} type - The type of the form attribute
 * @property {boolean} required - Whether or not the form attribute is required
 * @property {string} [placeholder] - An optional placeholder for the form attribute
 * @property {string} [value] - The form attribute value
 * @property {} [upValue]
 * @property {} [downValue]
 */
export interface FormFieldAttributes {
    name: string;
    type: string;
    required: boolean;
    placeholder?: string;
    value?: string;
    upValue?: any;
    downValue?: any;
}
/**
 * @typedef FormField
 * @property {FormFieldAttributes} attributes - The form attributes
 * @property {string} label - The label for the form field
 * @property {string} type - The type of the form field
 */
export interface FormField {
    attributes: FormFieldAttributes;
    label: string;
    type: string;
}
/**
 * An object representing the form state
 * @typedef FormState
 * @property {} formData - An object containing the form data
 * @property {} errors - Contains the form errors, if any
 * @property {boolean} submitDisabled - If set, will disabled the form submission
 */
export interface FormState {
    formData: any;
    errors: any;
    submitDisabled: boolean;
}
/**
 * Properties to define DynamicForm
 * @typedef FormProps
 * @property {FormAttributes} formAttributes - An object representing the form attributes
 * @property {} [message] - The message to be transmitted with the form
 * @property {Function} [submitFormCallback] - A callback function triggered after the form has been submitted
 */
export interface FormProps {
    formAttributes: FormAttributes;
    message?: any;
    submitFormCallback?: Function;
}
/**
 * Properties for the DynamicForm items
 * @typedef ItemProps
 * @property {Function} handleChange - Function triggered on component onChange
 * @property {boolean} error - It represent the form item validation
 * @property {} stateData - The value to be passed to the form item
 * @extends {ThemeProps}
 */
export interface ItemProps extends ThemeProps {
    handleChange: (event: any) => void;
    error: boolean;
    stateData: any;
}
/**
 * @classdesc Dynamic form component
 * @param {FormProps} props - props
 * @extends {React.Component}
 */
export declare class DynamicForm extends React.Component<FormProps, FormState> {
    constructor(props: FormProps);
    componentWillMount(): void;
    submitForm: (e: any) => void;
    /**
     * Updates form values in form.state
     * as user changes form values
     * @param e
     */
    handleChange: (e: any) => void;
    submitButtonDisabled: () => boolean;
    saveInitialValue: (field: FormField) => void;
    render(): JSX.Element;
}
