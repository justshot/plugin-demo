import * as React from "react";
import { ThemeProps, CSSProps, ButtonThemeProps } from "../theme";
import { InputAreaStyle } from "../../../state/ChatConfig";
/**
 * @typedef MessageInput.MessageInputThemeProps
 * @property {CSSProps} Container container
 * @property {ButtonThemeProps} Button send message button
 */
export interface MessageInputThemeProps {
    Container: CSSProps;
    Button: ButtonThemeProps;
}
/**
 * Properties of Message Input.
 * @typedef MessageInput.MessageInputProps
 * @property {MessageInput.MessageInputThemeProps} [theme.MessageInput] - theme
 * @property {InputAreaStyle} [areaStyle=Bubble] - Visual style of the text input element.
 * @property {string} [disabledReason] - A reason on why MessageInput is disabled.
 * @property {boolean} [returnKeySendsMessage=true] - Whether pressing the return key should send a message.
 * @property {number} charLimit - Identifies character limit for a single message.
 * @property {DynamicComponentChildren<MessageInput.MessageInputChildrenProps>} [children] - children
 */
export interface MessageInputProps {
    areaStyle?: InputAreaStyle;
    disabledReason?: string;
    returnKeySendsMessage?: boolean;
    charLimit: number;
}
/**
 * @classdesc This is a container for MessageInputArea and SendButton.
 * @param {MessageInput.MessageInputProps} props - Properties to be passed to configure this component.
 * @extends {React.PureComponent}
 */
export declare class MessageInput extends React.PureComponent<MessageInputProps & ThemeProps, undefined> {
    static readonly displayName = "MessageInput";
    /**
     * Dynamic content store
     *
     * @static
     * @type {DynamicContentStore<MessageInput.MessageInputChildrenProps>}
     */
    static readonly Content: import("../../..").DynamicContentStore;
    /**
     * Default properties
     *
     * @static
     * @type {MessageInput.MessageInputProps}
     */
    static readonly defaultProps: {
        areaStyle: string;
        returnKeySendsMessage: boolean;
    };
    static updateAll(): void;
    render(): JSX.Element;
}
