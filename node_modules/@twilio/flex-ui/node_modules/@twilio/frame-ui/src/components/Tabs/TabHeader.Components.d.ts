import { ThemeSupport } from "../theme";
import * as React from "react";
export interface TabHeaderProps extends ThemeSupport {
    isActive?: boolean;
    setActive?: Function;
    label?: string | React.ReactNode;
    alignment: Alignments;
    icon?: string | React.ReactNode;
    iconActive?: string | React.ReactNode;
    showIcon?: boolean;
}
export declare type TabHeaderSubProps = Pick<TabHeaderProps, "isActive">;
export declare type Alignments = "left" | "center";
interface TabHeaderContainerProps {
    alignment: Alignments;
}
export declare const TabHeaderContainer: import("create-emotion-styled/types/react").StyledOtherComponent<TabHeaderContainerProps, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, import("../theme").Theme>;
export declare const TabHeaderIndicatorContainer: import("create-emotion-styled/types/react").StyledOtherComponent<Pick<TabHeaderProps, "isActive">, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, import("../theme").Theme>;
interface TabLabelProps {
    isActive: boolean;
    onClick: () => {};
}
export declare const TabLabel: import("create-emotion-styled/types/react").StyledOtherComponent<TabLabelProps, React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, import("../theme").Theme>;
export declare const IconWrapper: import("create-emotion-styled/types/react").StyledOtherComponent<{}, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, import("../theme").Theme>;
export {};
