import * as React from "react";
import { DynamicContentStore } from "../../../DynamicComponent";
import * as ChatChannelState from "../../../state/ChannelState";
import { MemberDisplayOptions, MessageStyle } from "../../../state/ChatConfig";
import { CompiledTemplate } from "../../../Template";
import { Strings } from "../../../localization";
export declare const displayName = "MessagingCanvas";
export declare const contentStore: DynamicContentStore;
/**
 * An object properties representing the PredefinedMessage
 * @property {string} body - content of the message
 * @property {string} authorName - name of the author
 * @property {boolean} isFromMe - whether it appears as message from the current user or not.
 */
export interface PredefinedMessage {
    body: string | keyof Strings;
    authorName: string | keyof Strings;
    isFromMe: boolean;
}
/**
 * An object properties representing the MessagingCanvas
 * @typedef {Object} MessagingCanvasProps
 * @property {string} sid - A unique identifier of the message.
 * @property {string} [inputDisabledReason] - A reason on why the input element is disabled.
 * @property {Function} [avatarCallback] - A handler to request for avatar.
 * @property {MemberDisplayOptions} [memberDisplayOptions] - Chat member display configuration.
 * @property {MessageStyle} [messageStyle] - Identifies how the message should be displayed.
 * @property {boolean} [showTypingIndicator] - Should the typing indicator be shown.
 * @property {boolean} [showReadStatus] - Should the read status be shown.
 * @property {boolean} [showTrayOnInactive] - Should MessageTray to be shown when channel is inactive.
 * @property {boolean} [showWelcomeMessage] - Should a welcome message to be shown.
 * @property {CompiledTemplate} [welcomeMessageText] - string representing the welcome message.
 * @property {number} [charLimit] - Identifies character limit for a single message.
 * @property {PredefinedMessage} [predefinedMessage] - Defines the predefined, introductory message to be shown to a customer.
 * @property {MessagingCanvas.MessagingCanvasThemeProps} [theme.MessagingCanvas] - theme
 */
export interface MessagingCanvasProps {
    sid: string;
    inputDisabledReason?: string;
    avatarCallback?: (identity: string) => string;
    memberDisplayOptions?: MemberDisplayOptions;
    messageStyle?: MessageStyle;
    showTypingIndicator?: boolean;
    showReadStatus?: boolean;
    showTrayOnInactive?: boolean;
    showWelcomeMessage?: boolean;
    charLimit?: number;
    welcomeMessageText?: CompiledTemplate;
    predefinedMessage?: PredefinedMessage;
}
export interface MessagingCanvasImplProps extends MessagingCanvasProps {
    channel?: ChatChannelState.ChannelState;
    charLimit?: number;
}
export declare class MessagingCanvasImpl extends React.PureComponent<MessagingCanvasImplProps> {
    render(): JSX.Element;
}
