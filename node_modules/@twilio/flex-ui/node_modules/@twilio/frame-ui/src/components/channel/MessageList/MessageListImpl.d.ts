import * as React from "react";
import { DynamicContentStore } from "../../../DynamicComponent";
import * as ChannelState from "../../../state/ChannelState";
import { MemberDisplayOptions, MessageStyle } from "../../../state/ChatConfig";
import { PredefinedMessage } from "../MessagingCanvas";
export declare const displayName = "MessageList";
export declare const contentStore: DynamicContentStore;
export interface MessageListImplProps {
    channelSid: string;
    channel?: ChannelState.ChannelState;
    isAppActive?: boolean;
    memberDisplayOptions: MemberDisplayOptions;
    messageStyle: MessageStyle;
    showTypingIndicator: boolean;
    showReadStatus: boolean;
    showWelcomeMessage: boolean;
    predefinedMessage?: PredefinedMessage;
}
export declare class MessageListImpl extends React.Component<MessageListImplProps> {
    private messageList;
    private loadedMessagesInUpdate;
    private keepScrolledToBottom;
    private keepTopScrollPosition;
    private lastScrollHeight;
    private lastScrollTop;
    private isTouchActive;
    private isScrollActive;
    private needsForceRenderAfterScroll;
    private afterScrollTimer;
    render(): JSX.Element;
    shouldComponentUpdate(nextProps: MessageListImplProps): boolean;
    componentDidMount(): void;
    componentWillMount(): void;
    componentWillUnmount(): void;
    private handleInputRowCountChanged;
    private handleInputMessagePosted;
    private handleInputFocus;
    private handleWindowResize;
    componentDidUpdate(): void;
    invalidateScrollPosition(): void;
    scrollToBottom(): void;
    private consumeLastMessageIfApplicable;
    private captureBottomScrollState;
    private captureScrollState;
    private loadMoreMessages;
    private onAfterScrollTimer;
    private scheduleAfterScrollTimer;
    private onScroll;
    private setMessageListRef;
    private findMyLastMessageIndex;
    private onTouchStart;
    private onTouchEnd;
    private getListItems;
    private injectDateSeparatorElements;
    private injectWelcomeMessage;
    private injectPredefinedMessage;
}
