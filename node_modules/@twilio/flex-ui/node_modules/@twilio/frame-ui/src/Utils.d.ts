export interface Version {
    major: number;
    minor: number;
    build: number;
}
export declare class Utils {
    static stableSort<T>(array: Array<T>, compare: (a: T, b: T) => number): Array<T>;
    /**
     * Deep merge two objects into a new object.
     */
    static merge<T>(obj1: any, obj2: any, override?: boolean): T;
    /**
     * Deep merge second object into the first one.
     *
     * @param obj1 first object to merge into
     * @param obj2 second object
     * @param override whether values in the first object will be overridden
     */
    static mergeInto<T>(obj1: any, obj2: any, override?: boolean): T;
    static mergeArrayItems<T>(array: Array<T>): Array<T>;
    /**
     * Update static overrideProps for all components that have original defaultProps
     *
     * Use with components decorated with withDefaultPropsUpdate.
     *
     * @param allComponents
     * @param defaultPropsByComponent
     */
    static updateDefaultProps<T>(allComponents: T, defaultPropsByComponent: {
        [P in keyof T]?: any;
    }): void;
    static getNameForMember(friendlyNameOverrides: boolean, customName: string, friendlyName: string, identity: string): string;
    static formatString(theString: string, ...params: Array<string>): string;
    static parseVersion(version: string): Version;
    static isGreaterThanTargetVersion(version: Version, targetVersion: Version): boolean;
    static simpleUrlRegexp: RegExp;
    static urlRegexp: RegExp;
    static copyMap<K, V>(sourceMap: Map<K, V>): Map<K, V>;
    static isSameDate(date1: Date, date2: Date): boolean;
    static isToday(date: Date): boolean;
    static isYesterday(date: Date): boolean;
    static formatSeparatorDate(date: Date): string;
    static parseText(rawBody: string): any[];
    private static formatTimeDurationInFull;
    private static formatTimeDurationInCompact;
    /**
     * Format time duration as below
     * 0sec - 59min - MM:SS
     * 1h - 23h59min - HHh MMmin
     * from 1d - DDd HHh
     */
    private static formatTimeDurationInShort;
    static formatTimeDuration(time: number, format?: "full" | "compact" | "short"): string;
}
