import * as React from "react";
export declare type CompiledTemplate = (context?: any) => string;
declare const templates: any;
/**
 * Initializes the passed strings object by validating each item in the object and compiles them.
 * @param {object} strings It represents the key/value pair of template strings.
 */
export declare function initWithStrings<S>(strings: S): void;
export { templates };
/**
 * A properties of a Template while displaying the template string.
 * @typedef TemplateProps
 * @property {string} [className] A custom class name passed to template node.
 * @property {CompiledTemplate} [source] A function to compile the template string.
 * @property {string} [code] A template string of which the value needs to be used.
 */
export interface TemplateProps {
    className?: string;
    source?: CompiledTemplate;
    code?: string;
    [contextProps: string]: any;
}
export declare class Template extends React.Component<TemplateProps, undefined> {
    render(): JSX.Element;
    static defaultProps: {
        className: string;
    };
    private escapeHtml;
}
